{"ast":null,"code":"var _jsxFileName = \"/home/atul-maurya/Downloads/GHG2/Frontend/src/views/admin/chatbot/index.jsx\",\n  _s = $RefreshSig$();\nimport { Box, Button, Heading, HStack, Input, Spinner, Text, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport runChat from \"./gemini\";\nimport Markdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Overview() {\n  _s();\n  const [messages, setMessages] = useState([]); // To store user and bot messages\n  const [userMessage, setUserMessage] = useState(''); // To handle the input message\n  const [isLoading, setIsLoading] = useState(false); // To handle loading state for bot's response\n\n  // Function to handle sending the message\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!userMessage.trim()) return;\n    const newMessages = [...messages, {\n      user: true,\n      text: userMessage\n    }]; // Add user message\n    setMessages(newMessages);\n    setUserMessage(''); // Clear input\n    setIsLoading(true);\n    let customMessage = userMessage + `  You are PrakritiBot, a specialized chatbot developed for a GHG Smart City Dashboard. Your primary role is to provide accurate, clear, and detailed information regarding greenhouse gases (GHGs), environmental issues, and related governmental policies. You will also offer insights about the GHG Smart City Dashboard and its features,and also give advices to prevent pollution and also provise data about the these things.\n\n    Strict Guidelines:\n\nYou are strictly prohibited from engaging in topics outside of GHG emissions, environmental issues, related policies, and the GHG Smart City Dashboard.\nYour focus must remain solely on educating users about environmental concerns and assisting them with relevant dashboard functionalities.\nRemember to prioritize user education, data accuracy, and actionable advice in every response you provide.\n\nYour responsibilities include:\n\nEnvironmental Emissions Information: Provide accurate data on various greenhouse gases, including CO₂, methane (CH₄), nitrous oxide (N₂O), and others. Explain data trends, their implications on climate change, and how they affect the broader environment.\n\nDashboard Insights: Inform users about the functionalities and features of the GHG Smart City Dashboard, helping them navigate and utilize the dashboard effectively.\n\nActionable Advice: Suggest ways to understand and mitigate environmental emissions based on the latest data. Offer practical tips for individuals, businesses, and policymakers on how to reduce their carbon footprints and contribute to environmental sustainability.\n\nUser Education: Facilitate a better understanding of GHG emissions, their sources, and their impact on the environment. Educate users on environmental policies and regulations, as well as effective strategies for compliance and improvement.\n\nPolicy Guidance: Provide insights on current environmental policies and regulations at local, national, and global levels. Offer advice on best practices for individuals and organizations to align with these policies.\n\nData Retrieval: Fetch the latest environmental data from the dashboard's API when requested, providing real-time or most recent data relevant to the user’s inquiries.\n\nProfessional Engagement: Maintain a professional yet engaging tone in all interactions. Be friendly and responsive, creating a positive user experience.\n`;\n    // console.log(customMessage)\n\n    try {\n      const response = await runChat(customMessage); // Get bot's response\n      // const response = await runChat(userMessage); // Get bot's response\n      setMessages([...newMessages, {\n        user: false,\n        text: response\n      }]); // Add bot's response\n    } catch (error) {\n      setMessages([...newMessages, {\n        user: false,\n        text: 'Error: Could not get a response.'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    maxW: \"lg\",\n    mx: \"auto\",\n    mt: \"100px\",\n    p: 5,\n    borderWidth: 1,\n    borderRadius: \"lg\",\n    boxShadow: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"lg\",\n      textAlign: \"center\",\n      mb: 5,\n      children: \"Chat with PrakritiBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 4,\n      align: \"stretch\",\n      bg: \"gray.50\",\n      p: 5,\n      borderRadius: \"md\",\n      boxShadow: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        overflowY: \"auto\",\n        maxH: \"400px\",\n        p: 5,\n        borderWidth: 1,\n        borderRadius: \"md\",\n        bg: \"white\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Box, {\n          mb: 2,\n          textAlign: msg.user ? 'right' : 'left',\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            bg: msg.user ? 'blue.500' : 'green.500',\n            color: \"white\",\n            p: 5 // Increased padding from 3 to 4 (20px more)\n            ,\n            borderRadius: \"md\",\n            display: \"inline-block\",\n            maxW: \"80%\",\n            children: /*#__PURE__*/_jsxDEV(Markdown, {\n              remarkPlugins: [remarkGfm],\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          justifyContent: \"center\",\n          mt: 2,\n          children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        children: /*#__PURE__*/_jsxDEV(HStack, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            value: userMessage,\n            onChange: e => setUserMessage(e.target.value),\n            placeholder: \"Type your message...\",\n            size: \"lg\",\n            borderColor: \"blue.400\",\n            focusBorderColor: \"blue.500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            colorScheme: \"blue\",\n            size: \"lg\",\n            isLoading: isLoading,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Overview, \"LjIcFxuLcFIJQbEkGDxhq0kuSEE=\");\n_c = Overview;\nvar _c;\n$RefreshReg$(_c, \"Overview\");","map":{"version":3,"names":["Box","Button","Heading","HStack","Input","Spinner","Text","VStack","React","useState","runChat","Markdown","remarkGfm","jsxDEV","_jsxDEV","Overview","_s","messages","setMessages","userMessage","setUserMessage","isLoading","setIsLoading","sendMessage","e","preventDefault","trim","newMessages","user","text","customMessage","response","error","maxW","mx","mt","p","borderWidth","borderRadius","boxShadow","children","as","size","textAlign","mb","fileName","_jsxFileName","lineNumber","columnNumber","spacing","align","bg","overflowY","maxH","map","msg","index","color","display","remarkPlugins","justifyContent","onSubmit","type","value","onChange","target","placeholder","borderColor","focusBorderColor","colorScheme","_c","$RefreshReg$"],"sources":["/home/atul-maurya/Downloads/GHG2/Frontend/src/views/admin/chatbot/index.jsx"],"sourcesContent":["import { Box, Button, Heading, HStack, Input, Spinner, Text, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport runChat from \"./gemini\";\nimport Markdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm'; \n\nexport default function Overview() {\n\n  const [messages, setMessages] = useState([]); // To store user and bot messages\n  const [userMessage, setUserMessage] = useState(''); // To handle the input message\n  const [isLoading, setIsLoading] = useState(false); // To handle loading state for bot's response\n\n  // Function to handle sending the message\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    if (!userMessage.trim()) return;\n\n    const newMessages = [...messages, { user: true, text: userMessage }]; // Add user message\n    setMessages(newMessages);\n    setUserMessage(''); // Clear input\n    setIsLoading(true);\n\n    let customMessage = userMessage+`  You are PrakritiBot, a specialized chatbot developed for a GHG Smart City Dashboard. Your primary role is to provide accurate, clear, and detailed information regarding greenhouse gases (GHGs), environmental issues, and related governmental policies. You will also offer insights about the GHG Smart City Dashboard and its features,and also give advices to prevent pollution and also provise data about the these things.\n\n    Strict Guidelines:\n\nYou are strictly prohibited from engaging in topics outside of GHG emissions, environmental issues, related policies, and the GHG Smart City Dashboard.\nYour focus must remain solely on educating users about environmental concerns and assisting them with relevant dashboard functionalities.\nRemember to prioritize user education, data accuracy, and actionable advice in every response you provide.\n\nYour responsibilities include:\n\nEnvironmental Emissions Information: Provide accurate data on various greenhouse gases, including CO₂, methane (CH₄), nitrous oxide (N₂O), and others. Explain data trends, their implications on climate change, and how they affect the broader environment.\n\nDashboard Insights: Inform users about the functionalities and features of the GHG Smart City Dashboard, helping them navigate and utilize the dashboard effectively.\n\nActionable Advice: Suggest ways to understand and mitigate environmental emissions based on the latest data. Offer practical tips for individuals, businesses, and policymakers on how to reduce their carbon footprints and contribute to environmental sustainability.\n\nUser Education: Facilitate a better understanding of GHG emissions, their sources, and their impact on the environment. Educate users on environmental policies and regulations, as well as effective strategies for compliance and improvement.\n\nPolicy Guidance: Provide insights on current environmental policies and regulations at local, national, and global levels. Offer advice on best practices for individuals and organizations to align with these policies.\n\nData Retrieval: Fetch the latest environmental data from the dashboard's API when requested, providing real-time or most recent data relevant to the user’s inquiries.\n\nProfessional Engagement: Maintain a professional yet engaging tone in all interactions. Be friendly and responsive, creating a positive user experience.\n`\n    // console.log(customMessage)\n\n    try {\n      const response = await runChat(customMessage); // Get bot's response\n      // const response = await runChat(userMessage); // Get bot's response\n      setMessages([...newMessages, { user: false, text: response }]); // Add bot's response\n    } catch (error) {\n      setMessages([...newMessages, { user: false, text: 'Error: Could not get a response.' }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Box maxW=\"lg\" mx=\"auto\" mt=\"100px\" p={5} borderWidth={1} borderRadius=\"lg\" boxShadow=\"lg\">\n      <Heading as=\"h1\" size=\"lg\" textAlign=\"center\" mb={5}>\n        Chat with PrakritiBot\n      </Heading>\n      <VStack spacing={4} align=\"stretch\" bg=\"gray.50\" p={5} borderRadius=\"md\" boxShadow=\"md\">\n        <Box overflowY=\"auto\" maxH=\"400px\" p={5} borderWidth={1} borderRadius=\"md\" bg=\"white\">\n          {messages.map((msg, index) => (\n            <Box key={index} mb={2} textAlign={msg.user ? 'right' : 'left'}>\n              <Text\n                bg={msg.user ? 'blue.500' : 'green.500'}\n                color=\"white\"\n                p={5} // Increased padding from 3 to 4 (20px more)\n                borderRadius=\"md\"\n                display=\"inline-block\"\n                maxW=\"80%\"\n              >\n                <Markdown remarkPlugins={[remarkGfm]}>{msg.text}</Markdown>\n              </Text>\n            </Box>\n          ))}\n          {isLoading && (\n            <Box display=\"flex\" justifyContent=\"center\" mt={2}>\n              <Spinner />\n            </Box>\n          )}\n        </Box>\n        <form onSubmit={sendMessage}>\n          <HStack>\n            <Input\n              type=\"text\"\n              value={userMessage}\n              onChange={(e) => setUserMessage(e.target.value)}\n              placeholder=\"Type your message...\"\n              size=\"lg\"\n              borderColor=\"blue.400\"\n              focusBorderColor=\"blue.500\"\n            />\n            <Button type=\"submit\" colorScheme=\"blue\" size=\"lg\" isLoading={isLoading}>\n              Send\n            </Button>\n          </HStack>\n        </form>\n      </VStack>\n    </Box>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}