{"ast":null,"code":"import { scrollInfo } from './track.mjs';\nimport { observeTimeline } from './observe.mjs';\nimport { supportsScrollTimeline } from './supports.mjs';\nfunction scrollTimelineFallback({\n  source,\n  container,\n  axis = \"y\"\n}) {\n  // Support legacy source argument. Deprecate later.\n  if (source) container = source;\n  // ScrollTimeline records progress as a percentage CSSUnitValue\n  const currentTime = {\n    value: 0\n  };\n  const cancel = scrollInfo(info => {\n    currentTime.value = info[axis].progress * 100;\n  }, {\n    container,\n    axis\n  });\n  return {\n    currentTime,\n    cancel\n  };\n}\nconst timelineCache = new Map();\nfunction getTimeline({\n  source,\n  container = document.documentElement,\n  axis = \"y\"\n} = {}) {\n  // Support legacy source argument. Deprecate later.\n  if (source) container = source;\n  if (!timelineCache.has(container)) {\n    timelineCache.set(container, {});\n  }\n  const elementCache = timelineCache.get(container);\n  if (!elementCache[axis]) {\n    elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({\n      source: container,\n      axis\n    }) : scrollTimelineFallback({\n      source: container,\n      axis\n    });\n  }\n  return elementCache[axis];\n}\nfunction isOnScrollWithInfo(onScroll) {\n  return onScroll.length === 2;\n}\nfunction needsMainThreadScrollTracking(options) {\n  return options && (options.target || options.offset);\n}\nfunction scroll(onScroll, options) {\n  const axis = (options === null || options === void 0 ? void 0 : options.axis) || \"y\";\n  if (typeof onScroll === \"function\") {\n    /**\n     * If the onScroll function has two arguments, it's expecting\n     * more specific information about the scroll from scrollInfo.\n     */\n    if (isOnScrollWithInfo(onScroll) || needsMainThreadScrollTracking(options)) {\n      return scrollInfo(info => {\n        onScroll(info[axis].progress, info);\n      }, options);\n    } else {\n      return observeTimeline(onScroll, getTimeline(options));\n    }\n  } else {\n    /**\n     * If we need main thread scroll tracking because we're tracking\n     * a target or defined offsets, we need to create a scrollInfo timeline.\n     * Over time the number of sitauations where this is true\n     */\n    if (needsMainThreadScrollTracking(options)) {\n      onScroll.pause();\n      return scrollInfo(info => {\n        onScroll.time = onScroll.duration * info[axis].progress;\n      }, options);\n    } else {\n      return onScroll.attachTimeline(getTimeline(options));\n    }\n  }\n}\nexport { scroll };","map":{"version":3,"names":["scrollInfo","observeTimeline","supportsScrollTimeline","scrollTimelineFallback","source","container","axis","currentTime","value","cancel","info","progress","timelineCache","Map","getTimeline","document","documentElement","has","set","elementCache","get","ScrollTimeline","isOnScrollWithInfo","onScroll","length","needsMainThreadScrollTracking","options","target","offset","scroll","pause","time","duration","attachTimeline"],"sources":["/home/atul-maurya/Downloads/GHG2/Frontend/node_modules/framer-motion/dist/es/render/dom/scroll/index.mjs"],"sourcesContent":["import { scrollInfo } from './track.mjs';\nimport { observeTimeline } from './observe.mjs';\nimport { supportsScrollTimeline } from './supports.mjs';\n\nfunction scrollTimelineFallback({ source, container, axis = \"y\", }) {\n    // Support legacy source argument. Deprecate later.\n    if (source)\n        container = source;\n    // ScrollTimeline records progress as a percentage CSSUnitValue\n    const currentTime = { value: 0 };\n    const cancel = scrollInfo((info) => {\n        currentTime.value = info[axis].progress * 100;\n    }, { container, axis });\n    return { currentTime, cancel };\n}\nconst timelineCache = new Map();\nfunction getTimeline({ source, container = document.documentElement, axis = \"y\", } = {}) {\n    // Support legacy source argument. Deprecate later.\n    if (source)\n        container = source;\n    if (!timelineCache.has(container)) {\n        timelineCache.set(container, {});\n    }\n    const elementCache = timelineCache.get(container);\n    if (!elementCache[axis]) {\n        elementCache[axis] = supportsScrollTimeline()\n            ? new ScrollTimeline({ source: container, axis })\n            : scrollTimelineFallback({ source: container, axis });\n    }\n    return elementCache[axis];\n}\nfunction isOnScrollWithInfo(onScroll) {\n    return onScroll.length === 2;\n}\nfunction needsMainThreadScrollTracking(options) {\n    return options && (options.target || options.offset);\n}\nfunction scroll(onScroll, options) {\n    const axis = (options === null || options === void 0 ? void 0 : options.axis) || \"y\";\n    if (typeof onScroll === \"function\") {\n        /**\n         * If the onScroll function has two arguments, it's expecting\n         * more specific information about the scroll from scrollInfo.\n         */\n        if (isOnScrollWithInfo(onScroll) ||\n            needsMainThreadScrollTracking(options)) {\n            return scrollInfo((info) => {\n                onScroll(info[axis].progress, info);\n            }, options);\n        }\n        else {\n            return observeTimeline(onScroll, getTimeline(options));\n        }\n    }\n    else {\n        /**\n         * If we need main thread scroll tracking because we're tracking\n         * a target or defined offsets, we need to create a scrollInfo timeline.\n         * Over time the number of sitauations where this is true\n         */\n        if (needsMainThreadScrollTracking(options)) {\n            onScroll.pause();\n            return scrollInfo((info) => {\n                onScroll.time = onScroll.duration * info[axis].progress;\n            }, options);\n        }\n        else {\n            return onScroll.attachTimeline(getTimeline(options));\n        }\n    }\n}\n\nexport { scroll };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,eAAe,QAAQ,eAAe;AAC/C,SAASC,sBAAsB,QAAQ,gBAAgB;AAEvD,SAASC,sBAAsBA,CAAC;EAAEC,MAAM;EAAEC,SAAS;EAAEC,IAAI,GAAG;AAAK,CAAC,EAAE;EAChE;EACA,IAAIF,MAAM,EACNC,SAAS,GAAGD,MAAM;EACtB;EACA,MAAMG,WAAW,GAAG;IAAEC,KAAK,EAAE;EAAE,CAAC;EAChC,MAAMC,MAAM,GAAGT,UAAU,CAAEU,IAAI,IAAK;IAChCH,WAAW,CAACC,KAAK,GAAGE,IAAI,CAACJ,IAAI,CAAC,CAACK,QAAQ,GAAG,GAAG;EACjD,CAAC,EAAE;IAAEN,SAAS;IAAEC;EAAK,CAAC,CAAC;EACvB,OAAO;IAAEC,WAAW;IAAEE;EAAO,CAAC;AAClC;AACA,MAAMG,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC/B,SAASC,WAAWA,CAAC;EAAEV,MAAM;EAAEC,SAAS,GAAGU,QAAQ,CAACC,eAAe;EAAEV,IAAI,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,EAAE;EACrF;EACA,IAAIF,MAAM,EACNC,SAAS,GAAGD,MAAM;EACtB,IAAI,CAACQ,aAAa,CAACK,GAAG,CAACZ,SAAS,CAAC,EAAE;IAC/BO,aAAa,CAACM,GAAG,CAACb,SAAS,EAAE,CAAC,CAAC,CAAC;EACpC;EACA,MAAMc,YAAY,GAAGP,aAAa,CAACQ,GAAG,CAACf,SAAS,CAAC;EACjD,IAAI,CAACc,YAAY,CAACb,IAAI,CAAC,EAAE;IACrBa,YAAY,CAACb,IAAI,CAAC,GAAGJ,sBAAsB,CAAC,CAAC,GACvC,IAAImB,cAAc,CAAC;MAAEjB,MAAM,EAAEC,SAAS;MAAEC;IAAK,CAAC,CAAC,GAC/CH,sBAAsB,CAAC;MAAEC,MAAM,EAAEC,SAAS;MAAEC;IAAK,CAAC,CAAC;EAC7D;EACA,OAAOa,YAAY,CAACb,IAAI,CAAC;AAC7B;AACA,SAASgB,kBAAkBA,CAACC,QAAQ,EAAE;EAClC,OAAOA,QAAQ,CAACC,MAAM,KAAK,CAAC;AAChC;AACA,SAASC,6BAA6BA,CAACC,OAAO,EAAE;EAC5C,OAAOA,OAAO,KAAKA,OAAO,CAACC,MAAM,IAAID,OAAO,CAACE,MAAM,CAAC;AACxD;AACA,SAASC,MAAMA,CAACN,QAAQ,EAAEG,OAAO,EAAE;EAC/B,MAAMpB,IAAI,GAAG,CAACoB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACpB,IAAI,KAAK,GAAG;EACpF,IAAI,OAAOiB,QAAQ,KAAK,UAAU,EAAE;IAChC;AACR;AACA;AACA;IACQ,IAAID,kBAAkB,CAACC,QAAQ,CAAC,IAC5BE,6BAA6B,CAACC,OAAO,CAAC,EAAE;MACxC,OAAO1B,UAAU,CAAEU,IAAI,IAAK;QACxBa,QAAQ,CAACb,IAAI,CAACJ,IAAI,CAAC,CAACK,QAAQ,EAAED,IAAI,CAAC;MACvC,CAAC,EAAEgB,OAAO,CAAC;IACf,CAAC,MACI;MACD,OAAOzB,eAAe,CAACsB,QAAQ,EAAET,WAAW,CAACY,OAAO,CAAC,CAAC;IAC1D;EACJ,CAAC,MACI;IACD;AACR;AACA;AACA;AACA;IACQ,IAAID,6BAA6B,CAACC,OAAO,CAAC,EAAE;MACxCH,QAAQ,CAACO,KAAK,CAAC,CAAC;MAChB,OAAO9B,UAAU,CAAEU,IAAI,IAAK;QACxBa,QAAQ,CAACQ,IAAI,GAAGR,QAAQ,CAACS,QAAQ,GAAGtB,IAAI,CAACJ,IAAI,CAAC,CAACK,QAAQ;MAC3D,CAAC,EAAEe,OAAO,CAAC;IACf,CAAC,MACI;MACD,OAAOH,QAAQ,CAACU,cAAc,CAACnB,WAAW,CAACY,OAAO,CAAC,CAAC;IACxD;EACJ;AACJ;AAEA,SAASG,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}